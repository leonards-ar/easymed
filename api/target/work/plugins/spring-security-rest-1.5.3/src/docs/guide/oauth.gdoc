This plugin is meant to be used in applications serving a REST API's to pure Javascript clients. The main authentication
flow of this plugin is to allow you to authenticate your users against any Spring Security-compatible user directory
(like a DB or an LDAP server).

However, there might be situations where you want to delegate the authentication against a third-party provider, like
Google or Facebook. Unfortunately, your pure Javascript front-end application cannot request the providers directly using
OAuth, because then the access keys will be made public.

So is this plugin's responsibility to provide endpoints so your Grails backend acts as a proxy for your front-end client.

The flow is something like the following:

!oauth.png!

# The client application requests and endpoint that requires authentication, so the server responds with a 401 response (*).
# The client redirects the user to the login form (*).
# This time, instead of using username and password, the user clicks on "Login with Google" button.
# Browser navigates to a Grails URL. Grails will generate a Google Login URL, giving Google a Grails callback URL.
# Browser navigates to Google Login. User logs in, and Google redirects the browser to the Grails callback URL.
# Browser navigates to that Grails callback URL. Then, Grails will use OAuth to fetch user information (like email) from Google. Based on that, will generate a REST API token and fetch and store principal information. The response from Grails will be a front-end URL where the token is a parameter.
# The browser will navigate to that URL, and the Javascript logic will read the token from the URL and store it locally.
# The client sends again a request to the protected resource, passing the token as an HTTP header (*).

The steps flagged with (*) remain unchanged from the [normal flow|guide:authentication].

The Grails callback URL mentioned above has this general format: @${grails.serverURL}/oauth/callback/${providerName}@.
You will need to configure such URL in your OAuth 2.0 provider.

To support OAuth, this plugin uses [Profile & Authentication Client for Java|https://github.com/leleuj/pac4j]. So you
can use any OAuth 2.0 provider they support. This includes at the time of writing:

* Dropbox.
* Facebook.
* GitHub.
* Google.
* LinkedIn.
* Windows Live.
* Wordpress.
* Yahoo.
* Paypal.

Note that OAuth 1.0a providers also work, like Twitter.

If your provider is not supported by pac4j, you can write your own. Please refer to the
[pac4j documentation|https://github.com/pac4j/pac4j/wiki/Clients#creating-your-own-client] for that.

The plugin also supports [CAS (Central Authentication Service)|https://www.apereo.org/projects/cas] using the OAuth
authentication flow.  See [CAS Authentication|guide:cas] for details.

To start the OAuth authentication flow, from your frontend application, generate a link to
@<YOUR_GRAILS_APP>/oauth/authenticate/<provider>@. The user clicking on that link represents step 4 in the previous
diagram.

Note that you can define the frontend callback URL in @Config.groovy@ under
@grails.plugin.springsecurity.rest.oauth.frontendCallbackUrl@.

{code}
grails.plugin.springsecurity.rest.oauth.frontendCallbackUrl = "http://my.frontend-app.com/welcome#token="
{code}

The token will be concatenated to the end of the URL.

{note}
For backwards compatibility with versions 1.5.2 and earlier, the callback URL can also be defined as a closure that will
be called with the token value as a parameter:

    {code}
    grails.plugin.springsecurity.rest.oauth.frontendCallbackUrl = { String tokenValue -> "http://my.frontend-app.com/welcome#token=${tokenValue}" }
    {code}
{note}

You can also define the URL as a @callback@ parameter in the original link, eg:

{code}
http://your-grails-api.com/oauth/authenticate/google?callback=http://your-frontend-app.com/auth-success.html?token=
{code}

Upon successful OAuth authorisation (after step 6.1 in the above diagram), an
[OauthUser|http://alvarosanchez.github.io/grails-spring-security-rest/latest/docs/gapi/grails/plugin/springsecurity/rest/oauth/OauthUser.html]
will be stored in the security context. This is done by a bean named @oauthUserDetailsService@. The
[default implementation|http://alvarosanchez.github.io/grails-spring-security-rest/latest/docs/gapi/grails/plugin/springsecurity/rest/oauth/DefaultOauthUserDetailsService.html]
delegates to the configured @userDetailsService@ bean, passing the profile ID as the username:

{code}
/**
 * Builds an {@link OauthUser}. Delegates to the default {@link UserDetailsService#loadUserByUsername(java.lang.String)}
 * where the username passed is {@link UserProfile#getId()}. If the user is not found, it will create a new one with
 * the the default roles.
 */
@Slf4j
class DefaultOauthUserDetailsService implements OauthUserDetailsService {

    @Delegate
    UserDetailsService userDetailsService

    UserDetailsChecker preAuthenticationChecks

    OauthUser loadUserByUserProfile(CommonProfile userProfile, Collection<GrantedAuthority> defaultRoles)
            throws UsernameNotFoundException {
        UserDetails userDetails
        OauthUser oauthUser

        try {
            log.debug "Trying to fetch user details for user profile: ${userProfile}"
            userDetails = userDetailsService.loadUserByUsername userProfile.id

            log.debug "Checking user details with ${preAuthenticationChecks.class.name}"
            preAuthenticationChecks?.check(userDetails)

            Collection<GrantedAuthority> allRoles = userDetails.authorities + defaultRoles
            oauthUser = new OauthUser(userDetails.username, userDetails.password, allRoles, userProfile)
        } catch (UsernameNotFoundException unfe) {
            log.debug "User not found. Creating a new one with default roles: ${defaultRoles}"
            oauthUser = new OauthUser(userProfile.id, 'N/A', defaultRoles, userProfile)
        }

        return oauthUser
    }

}
{code}


If you want to provide your own implementation, define it in @resources.groovy@ with bean name @oauthUserDetailsService@.
Make sure you implements the interface @OauthUserDetailsService@

If you want to do any additional post-OAuth authorisation check, you should do it on your @loadUserByUserProfile@
implementation. This is useful if you want to allow your corporate users to log into your application using their Gmail
account. In this case, you should decide based on OAuth20Profile.getEmail(), for instance:

{code}
OauthUser loadUserByUserProfile(OAuth20Profile userProfile, Collection<GrantedAuthority> defaultRoles) throws UsernameNotFoundException {
    if (userProfile.email.endsWith('example.org')) {
        return new OauthUser(userProfile.id, 'N/A', defaultRoles, userProfile)
    } else {
        throw new UsernameNotFoundException("User with email ${userProfile.email} now allowed. Only @example.org accounts are allowed.")
    }
}
{code}

h3. Error Handling

In case of any OAuth authentication failure, the plugin will redirect back to the frontend application so it
can render an error message and/or offer the user the option to try again. When an error occurs, the token
parameter will be empty, and error parameters will be appended to the callback URL e.g.

{code}
http://your-frontend-app.com/auth-success.html?token=&error=403&message=User+with+email+jimmy%40gmail.com+now+allowed&error_description=User+with+email+jimmy%40gmail.com+not+allowed&error_code=UsernameNotFoundException
{code}

A description of each error parameter is given below

* @error@ - a code describing the error. This parameter is required by [RFC 6749|https://tools.ietf.org/html/rfc6749]
* @error_description@ - a human readable message describing the error. This parameter is optional according to [RFC 6749|https://tools.ietf.org/html/rfc6749]
* @message@ - the value of this parameter will be identical to @error_description@, it is provided only for backwards compatability with versions 1.5.2 and earlier which omitted @error_description@
* @error_code@ - the value of this parameter will be simple name of the exception that caused the error

The error handling described above is implemented by a Spring bean named @callbackErrorHandler@. This behaviour can be customised
by providing a replacement bean of the same name that implements this interface

{code}
interface CallbackErrorHandler {

    /**
     * Converts an error that occurs during the callback to a parameter map that will be returned to the frontend
     * @param cause
     * @return
     */
    Map convert(Exception cause)
}
{code}

It is strongly recommended (but not enforced by the plugin) that you include in the returned @Map@ any parameters required by [RFC 6749|https://tools.ietf.org/html/rfc6749]

The following sections provide examples of how to configure the plugin for usage with some popular OAuth providers: Google, Facebook and Twitter.
